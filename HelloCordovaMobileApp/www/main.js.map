{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/camera/camera.component.css","webpack:///./src/app/camera/camera.component.html","webpack:///./src/app/camera/camera.component.ts","webpack:///./src/app/codebar/codebar.component.css","webpack:///./src/app/codebar/codebar.component.html","webpack:///./src/app/codebar/codebar.component.ts","webpack:///./src/app/cordova.service.ts","webpack:///./src/app/geolocation/geolocation.component.css","webpack:///./src/app/geolocation/geolocation.component.html","webpack:///./src/app/geolocation/geolocation.component.ts","webpack:///./src/app/my-nav/my-nav.component.css","webpack:///./src/app/my-nav/my-nav.component.html","webpack:///./src/app/my-nav/my-nav.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,4C;;;;;;;;;;;;;;;;;;;;;ACA0C;AAO1C;IALA;QAME,UAAK,GAAG,gBAAgB,CAAC;IAC3B,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AAEM;AACgC;AACpB;AACR;AACmE;AAChF;AACsB;AACe;AACZ;AACZ;AAwBnD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAtBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,uEAAc;gBACd,wEAAe;gBACf,uFAAoB;gBACpB,4EAAgB;aACjB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,4FAAuB;gBACvB,gEAAY;gBACZ,kEAAgB;gBAChB,iEAAe;gBACf,kEAAgB;gBAChB,+DAAa;gBACb,+DAAa;gBACb,kDAAM;aACP;YACD,SAAS,EAAE,CAAC,gEAAc,CAAC;YAC3B,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACnCtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACK;AACe;AACZ;AAE/D,IAAM,MAAM,GAAW;IACnB,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,wEAAe,EAAE;IAC9C,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,uFAAoB,EAAE;IACxD,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,2EAAgB,EAAE;CACnD,CAAC;AAEK,IAAM,MAAM,GAAwB,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;;;;;;;;;;;;ACZ3F,mB;;;;;;;;;;;ACAA,+G;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACE;AAOpD;IAEE,yBACU,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IACpC,CAAC;IAEL,kCAAQ,GAAR;IACA,CAAC;IAED,oCAAU,GAAV;QAAA,iBAIC;QAHC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,aAAG;YAC5C,KAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACnB,CAAC,EAAE,aAAG,IAAI,YAAK,CAAC,GAAG,CAAC,EAAV,CAAU,CAAC,CAAC;IACxB,CAAC;IAbU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAI0B,+DAAc;OAH7B,eAAe,CAe3B;IAAD,sBAAC;CAAA;AAf2B;;;;;;;;;;;;ACR5B,mB;;;;;;;;;;;ACAA,gD;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,mCAAQ,GAAR;IACA,CAAC;IALU,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;;;SAGxB,CAAC;;OACW,gBAAgB,CAO5B;IAAD,uBAAC;CAAA;AAP4B;;;;;;;;;;;;;;;;;;;;;;;;;;ACPsB;AACiC;AAIpF;IACI,iDAAiD;IACjD,MAAM,CAAC,MAAM,CAAC;AAClB,CAAC;AAED;IAGI,wBAAoB,IAAY;QAAhC,iBAOC;QAPmB,SAAI,GAAJ,IAAI,CAAQ;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,oDAAe,CAAU,IAAI,CAAC,CAAC;QACjD,sDAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,eAAK;YACzC,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACV,KAAI,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAI,mCAAO;aAAX;YACI,MAAM,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC;QAC7B,CAAC;;;OAAA;IACD,sBAAI,qCAAS;aAAb;YACI,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC;QAC/B,CAAC;;;OAAA;IACM,iCAAQ,GAAf;QACI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAGM,oCAAW,GAAlB;QACI,MAAM,CAAC,+CAAU,CAAC,MAAM,CAAC,UAAC,QAA0B;YAChD,OAAO,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CACzC,UAAU,MAAM;gBACZ,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC,EACD,UAAU,KAAK;gBACX,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC,EACD;gBACI,iBAAiB,EAAE,KAAK;gBACxB,oBAAoB,EAAE,IAAI;gBAC1B,eAAe,EAAE,IAAI;gBACrB,OAAO,EAAE,IAAI;gBACb,WAAW,EAAE,IAAI;gBACjB,MAAM,EAAE,6DAA6D;gBACrE,qBAAqB,EAAE,GAAG;gBAC1B,OAAO,EAAE,yBAAyB;gBAClC,WAAW,EAAE,WAAW;gBACxB,iBAAiB,EAAE,IAAI;gBACvB,kBAAkB,EAAE,KAAK,CAAC,kBAAkB;aAC/C,CACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oCAAW,GAAlB;QACI,MAAM,CAAC,+CAAU,CAAC,MAAM,CAAC,UAAC,QAA0B;YAChD,OAAO,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,kBAAkB,CAC9C,UAAU,MAAM;gBACZ,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC,EACD,UAAU,KAAK;gBACX,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAChE;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAGM,mCAAU,GAAjB;QACI,MAAM,CAAC,+CAAU,CAAC,MAAM,CAAC,UAAC,QAA0B;YAChD,OAAO,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,UAAC,MAAM;gBACzC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACd,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC,EAAE,UAAC,KAAK;gBACL,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAzEQ,cAAc;QAD1B,gEAAU,EAAE;yCAIiB,oDAAM;OAHvB,cAAc,CA0E1B;IAAD,qBAAC;CAAA;AA1E0B;;;;;;;;;;;;ACV3B,mB;;;;;;;;;;;ACAA,oD;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,uCAAQ,GAAR;IACA,CAAC;IALU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;;OACW,oBAAoB,CAOhC;IAAD,2BAAC;CAAA;AAPgC;;;;;;;;;;;;ACPjC,sCAAsC,iBAAiB,GAAG,cAAc,iBAAiB,GAAG,8BAA8B,6BAA6B,qBAAqB,WAAW,GAAG,G;;;;;;;;;;;ACA1L,+sC;;;;;;;;;;;;;;;;;;;;;;;;;;ACA0C;AAC6C;AAElD;AAOrC;IAOE,wBAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAL1D,eAAU,GAAwB,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,+DAAW,CAAC,OAAO,CAAC;aACnF,IAAI,CACH,0DAAG,CAAC,gBAAM,IAAI,aAAM,CAAC,OAAO,EAAd,CAAc,CAAC,CAC9B,CAAC;IAEyD,CAAC;IAPnD,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAQwC,sEAAkB;OAP/C,cAAc,CASxB;IAAD,qBAAC;CAAA;AATwB;;;;;;;;;;;;;ACV3B;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAGD,IAAM,SAAS,GAAG;IAChB,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,SAAS,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;IAC7C,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE;QACvC,SAAS,EAAE,CAAC;IACd,CAAC,EAAE,KAAK,CAAC,CAAC;AACZ,CAAC;AAAC,IAAI,CAAC,CAAC;IACN,KAAK,CAAC,6BAA6B,CAAC;IACpC,SAAS,EAAE,CAAC;AACd,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-my-nav></app-my-nav>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Pesquisa teste';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MyNavComponent } from './my-nav/my-nav.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule } from '@angular/material';\nimport { ROUTES } from './app.routes';\nimport { CameraComponent } from './camera/camera.component';\nimport { GeolocationComponent } from './geolocation/geolocation.component';\nimport { CodebarComponent } from './codebar/codebar.component';\nimport { CordovaService } from './cordova.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MyNavComponent,\n    CameraComponent,\n    GeolocationComponent,\n    CodebarComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    ROUTES\n  ],\n  providers: [CordovaService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { ModuleWithProviders } from \"@angular/compiler/src/core\";\nimport { RouterModule, Routes } from '@angular/router';\nimport { CameraComponent } from \"./camera/camera.component\";\nimport { GeolocationComponent } from \"./geolocation/geolocation.component\";\nimport { CodebarComponent } from \"./codebar/codebar.component\";\n\nconst routes: Routes = [\n    { path: 'camera', component: CameraComponent },\n    { path: 'geolocation', component: GeolocationComponent },\n    { path: 'codebar', component: CodebarComponent }\n];\n\nexport const ROUTES: ModuleWithProviders = RouterModule.forRoot(routes, { useHash: true });","module.exports = \"\"","module.exports = \"<button mat-button (click)=\\\"openCamera()\\\">Abrir a camera</button>\\n\\n<img [src]=\\\"image\\\">\"","import { Component, OnInit } from '@angular/core';\nimport { CordovaService } from '../cordova.service';\n\n@Component({\n  selector: 'app-camera',\n  templateUrl: './camera.component.html',\n  styleUrls: ['./camera.component.css']\n})\nexport class CameraComponent implements OnInit {\n  image: string;\n  constructor(\n    private cordovaService: CordovaService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  openCamera() {\n    this.cordovaService.openCamera().subscribe(res => {\n      this.image = res;\n    }, err => alert(err));\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<p>\\n  codebar works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-codebar',\n  templateUrl: './codebar.component.html',\n  styleUrls: ['./codebar.component.css']\n})\nexport class CodebarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject, fromEvent, Observable, Observer, observable } from 'rxjs';\n\n\n\nfunction _window(): any {\n    // return the global native browser window object\n    return window;\n}\n@Injectable()\nexport class CordovaService {\n\n    private resume: BehaviorSubject<boolean>;\n    constructor(private zone: NgZone) {\n        this.resume = new BehaviorSubject<boolean>(null);\n        fromEvent(document, 'resume').subscribe(event => {\n            this.zone.run(() => {\n                this.onResume();\n            });\n        });\n    }\n\n    get cordova(): any {\n        return _window().cordova;\n    }\n    get onCordova(): Boolean {\n        return !!_window().cordova;\n    }\n    public onResume(): void {\n        this.resume.next(true);\n    }\n\n\n    public openScanner(): Observable<any> {\n        return Observable.create((observer: Observer<string>) => {\n            _window().cordova.plugins.barcodeScanner.scan(\n                function (result) {\n                    observer.next(result);\n                },\n                function (error) {\n                    observer.error(error);\n                },\n                {\n                    preferFrontCamera: false, // iOS and Android\n                    showFlipCameraButton: true, // iOS and Android\n                    showTorchButton: true, // iOS and Android\n                    torchOn: true, // Android, launch with the torch switched on (if available)\n                    saveHistory: true, // Android, save scan history (default false)\n                    prompt: \"Coloque um código de barras dentro da área de digitalização\", // Android\n                    resultDisplayDuration: 500, // Android, display scanned text for X ms. 0 suppresses it entirely, default 1500\n                    formats: \"QR_CODE,PDF_417, EAN_13\", // default: all but PDF_417 and RSS_EXPANDED\n                    orientation: \"landscape\", // Android only (portrait|landscape), default unset so it rotates with the device\n                    disableAnimations: true, // iOS\n                    disableSuccessBeep: false // iOS and Android\n                }\n            )\n        });\n    }\n\n    public getLocation(): Observable<any> {\n        return Observable.create((observer: Observer<string>) => {\n            _window().navigator.geolocation.getCurrentPosition(\n                function (result) {\n                    observer.next(result);\n                },\n                function (error) {\n                    observer.error(error);\n                },\n                { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }\n            )\n        });\n    }\n\n\n    public openCamera(): Observable<any> {\n        return Observable.create((observer: Observer<string>) => {\n            _window().navigator.camera.getPicture((result) => {\n                alert(result);\n                observer.next(result);\n            }, (error) => {\n                observer.error(error);\n            });\n        });\n    }\n}","module.exports = \"\"","module.exports = \"<p>\\n  geolocation works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-geolocation',\n  templateUrl: './geolocation.component.html',\n  styleUrls: ['./geolocation.component.css']\n})\nexport class GeolocationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".sidenav-container {\\n  height: 100%;\\n}\\n\\n.sidenav {\\n  width: 200px;\\n}\\n\\n.mat-toolbar.mat-primary {\\n  position: -webkit-sticky;\\n  position: sticky;\\n  top: 0;\\n}\\n\"","module.exports = \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\n  <mat-sidenav\\n    #drawer\\n    class=\\\"sidenav\\\"\\n    fixedInViewport=\\\"true\\\"\\n    [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\n    [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\n    [opened]=\\\"!(isHandset$ | async)\\\">\\n    <mat-toolbar color=\\\"primary\\\">Menu</mat-toolbar>\\n    <mat-nav-list>\\n      <a mat-list-item (click)=\\\"drawer.toggle()\\\" [routerLink]=\\\"['/camera']\\\">camera 1</a>\\n      <a mat-list-item (click)=\\\"drawer.toggle()\\\" [routerLink]=\\\"['/geolocation']\\\">geolocation 2</a>\\n      <a mat-list-item (click)=\\\"drawer.toggle()\\\" [routerLink]=\\\"['/codebar']\\\">codebar 3</a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n  <mat-sidenav-content>\\n    <mat-toolbar color=\\\"primary\\\">\\n      <button\\n        type=\\\"button\\\"\\n        aria-label=\\\"Toggle sidenav\\\"\\n        mat-icon-button\\n        (click)=\\\"drawer.toggle()\\\"\\n        *ngIf=\\\"isHandset$ | async\\\">\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n      </button>\\n      <span>Pesquisa Teste</span>\\n    </mat-toolbar>\\n    <!-- Add Content Here -->\\n    <router-outlet></router-outlet>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\"","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-my-nav',\n  templateUrl: './my-nav.component.html',\n  styleUrls: ['./my-nav.component.css']\n})\nexport class MyNavComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches)\n    );\n    \n  constructor(private breakpointObserver: BreakpointObserver) {}\n  \n  }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\n\nconst bootstrap = () => {\n  platformBrowserDynamic().bootstrapModule(AppModule);\n};\n\nif (typeof window['cordova'] !== 'undefined') {\n  document.addEventListener('deviceready', () => {\n    bootstrap();\n  }, false);\n} else {\n  alert('Cordova não esta disponível')\n  bootstrap();\n}\n"],"sourceRoot":""}